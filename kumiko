#!/usr/bin/env -S pkgx python@3

import sys
import os
import json
import argparse
import subprocess
import hashlib
import re

from kumikolib import Kumiko
from lib.html import HTML
from lib.debug import Debug
import webbrowser as wb

parser = argparse.ArgumentParser(description = 'Kumiko CLI')

# Input/Output
parser.add_argument('-i', '--input', nargs = '+', required = True, help = 'A file or folder name to parse')
parser.add_argument('-o', '--output', nargs = 1, help = 'A file name to save json/html output to')
parser.add_argument('--rtl', action = 'store_true', help = 'Pass this option to number panels right-to-left')

# HTML reader page options
parser.add_argument(
	'-b',
	'--browser',
	nargs = '?',
	help = 'Opens given browser to read your comic page(s) panel-by-panel! (implies --html)',
	choices = ['firefox', 'konqueror', 'chromium', 'chrome', 'google-chrome'],
	const = 'firefox'
)
parser.add_argument('--html', action = 'store_true', help = 'Generates an HTML file for reading')
parser.add_argument(
	'--html-static-dir',
	nargs = 1,
	help =
	'When generating HTML, this will be the relative directory for javascript files: <script src="$static-dir/...">  (implies --html)'
)
parser.add_argument('-s', '--save-panels', nargs = '?', help = 'Save detected panels as images', const = 'auto')

# Configuration tweaks
parser.add_argument(
	'--min-panel-size-ratio',
	nargs = 1,
	type = float,
	help =
	'Panels will be considered too small and exluded if they have a width < img.width * ratio or height < img/height * ratio (default is 1/10th)'
)

parser.add_argument(
	'--no-panel-expansion',
	action = 'store_true',
	help = 'Disable panel expansion (may be desirable with --save-panels)'
)

# Utilities
parser.add_argument(
	'-d', '--debug', action = 'store_true', help = "Generate an HTML debug file to show Kumiko's processing steps"
)
parser.add_argument('--progress', action = 'store_true', help = 'Prints progress information')

args = parser.parse_args()
k = Kumiko(
	{
		'debug': args.debug,
		'progress': args.progress,
		'rtl': args.rtl,
		'min_panel_size_ratio': args.min_panel_size_ratio[0] if args.min_panel_size_ratio else False,
		'panel_expansion': not args.no_panel_expansion,
	}
)

folder = None
html_file = None

# Folder
if len(args.input) == 1 and os.path.isdir(args.input[0]):
	folder = args.input[0]
	if folder[-1] == '/':
		folder = folder[0:-1]

	html_file = os.path.join('tests/results', os.path.basename(folder) + '.html')

	k.parse_dir(folder)

# File (image or pdf)
elif len(args.input) == 1 and os.path.isfile(args.input[0]):
	filename = args.input[0]

	folder = os.path.dirname(filename)
	if not folder:
		folder = './'

	html_file = os.path.join('tests/results', os.path.basename(filename) + '.html')

	if re.search(r'\.pdf$', filename, re.I):
		k.parse_pdf_file(filename)
		folder = k.temp_folder
	else:
		k.parse_image(filename)

# URL list
else:
	folder = 'urls'
	filehash = hashlib.sha1(';'.join(sorted(args.input)).encode()).hexdigest()
	html_file = os.path.join('tests/results', filehash + '.html')

	k.parse_url_list(args.input)

infos = k.get_infos()

if len(infos) == 0:
	print(f"--input (-i) is not an image or pdf file, or directory, or URL list: '{args.input}'")
	sys.exit(1)

infos = json.dumps(infos)

# Generate HTML
if args.html or args.browser or args.html_static_dir or args.debug:
	images_dir = 'urls' if folder == 'urls' else os.path.relpath(folder, 'tests/results') + '/'
	reldir = args.html_static_dir[0] if args.html_static_dir else '../../'

	html = ''
	if args.debug:
		html = Debug.html(folder, reldir)
	else:
		html += HTML.header(reldir = reldir)
		html += HTML.reader(infos, images_dir)
		html += HTML.footer

	if args.output:
		html_file = args.output[0]

	if args.browser or args.output or args.debug:
		fh = open(html_file, 'w')
		fh.write(html)
		fh.close()
		print(f"Saved HTML file: {html_file}")
	else:
		print(html)

# Or JSON infos
else:
	if args.output:
		f = open(args.output[0], 'w')
		f.write(infos)
		f.close()
	else:
		print(infos)

# Open in browser
if args.browser:
	print(f"attempting to load browser: {args.browser} with {html_file}")

	browserfile = 'file://' + os.path.abspath(html_file)
	wb.get(args.browser).open(browserfile)
	# subprocess.run([args.browser, html_file])

# Save panels to separate image files
if args.save_panels:
	k.save_panels(args.save_panels)
