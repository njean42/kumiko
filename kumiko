#!/usr/bin/env python

import sys
import os
import json
import argparse
import subprocess, hashlib
import shutil

from pdf2image import convert_from_path

from kumikolib import Kumiko
from lib.html import HTML
from lib.debug import Debug

info = []

parser = argparse.ArgumentParser(description = 'Kumiko CLI')

# Input/Output
parser.add_argument('-i', '--input', nargs = '+', required = True, help = 'A file or folder name to parse')
parser.add_argument('-o', '--output', nargs = 1, help = 'A file name to save json/html output to')
parser.add_argument('--rtl', action = 'store_true', help = 'Pass this option to number panels right-to-left')

# HTML reader page options
parser.add_argument(
	'-b',
	'--browser',
	nargs = '?',
	help = 'Opens given browser to read your comic page(s) panel-by-panel! (implies --html)',
	choices = ['firefox', 'konqueror', 'chromium'],
	const = 'firefox'
)
parser.add_argument('--html', action = 'store_true', help = 'Generates an HTML file for reading')
parser.add_argument(
	'--html-static-dir',
	nargs = 1,
	help =
	'When generating HTML, this will be the relative directory for javascript files: <script src="$static-dir/...">  (implies --html)'
)
parser.add_argument(
	"-s",
	"--save-panels",
	action = "store_true",
	help = "Enable this option to save detected panels as images",
)

parser.add_argument(
	"--pdf",
	action = "store_true",
	help = "Indicates the input is a PDF file to be converted to images",
)

# Configuration tweaks
parser.add_argument(
	'--min-panel-size-ratio',
	nargs = 1,
	type = float,
	help =
	'Panels will be considered too small and exluded if they have a width < img.width * ratio or height < img/height * ratio (default is 1/15th)'
)

# Utilities
parser.add_argument(
	'-d', '--debug', action = 'store_true', help = "Generate an HTML debug file to show Kumiko's processing steps"
)
parser.add_argument('--progress', action = 'store_true', help = 'Prints progress information')

args = parser.parse_args()
k = Kumiko(
	{
		'debug': args.debug,
		'progress': args.progress,
		'rtl': args.rtl,
		'min_panel_size_ratio': args.min_panel_size_ratio[0] if args.min_panel_size_ratio else False
	}
)

file_or_folder = args.input[0]
folder = None
html_file = None

# PDF File
if args.pdf:
	if not os.path.isfile(file_or_folder):
		print("The specified file is not a valid PDF.")
		sys.exit(1)

	parentFolderName = os.path.basename(os.path.dirname(file_or_folder))
	pdfBaseName = os.path.splitext(os.path.basename(file_or_folder))[0]
	outputBasePath = os.path.join("./output", parentFolderName, pdfBaseName)

	# Convert PDF to images
	images = convert_from_path(file_or_folder)
	for i, image in enumerate(images):
		image_output_path = os.path.join(outputBasePath, f"page_{i}.jpg")
		if not os.path.exists(outputBasePath):
			os.makedirs(outputBasePath)
		image.save(image_output_path, "JPEG")

		if args.save_panels:
			# Process each image
			info = k.parse_images([image_output_path])
			for item in info:
				panel_output_path = os.path.join(outputBasePath, f"page_{i}")
				k.save_panels(image_output_path, item["panels"], panel_output_path)
# Folder
elif len(args.input) == 1 and os.path.isdir(args.input[0]):
	folder = args.input[0]
	if folder[-1] == '/':
		folder = folder[0:-1]
	info = k.parse_dir(folder)
	html_file = os.path.join('tests/results', os.path.basename(folder) + '.html')

	if args.save_panels:
		for f in os.listdir(folder):
			file_path = os.path.join(folder, f)
			if os.path.isfile(file_path):
				panels_info = k.parse_images([file_path])
				for item in panels_info:
					output_path = os.path.join("./output", originalFolderName, os.path.splitext(f)[0])
					k.save_panels(file_path, item["panels"], output_path)
# File
elif len(args.input) == 1 and os.path.isfile(args.input[0]):
	f = args.input[0]
	folder = os.path.dirname(f)
	if not folder:
		folder = './'
	info = k.parse_images([f])
	html_file = os.path.join('tests/results', os.path.basename(f) + '.html')
	info = k.get_infos()
	if args.save_panels:
		k.save_panels(f, info[0]["panels"])
# URL list
else:
	folder = 'urls'
	downloaded_files, info = k.parse_url_list(args.input)
	filehash = hashlib.sha1(';'.join(sorted(args.input)).encode()).hexdigest()
	html_file = os.path.join('tests/results', filehash + '.html')

	if args.save_panels:
		for file_path in downloaded_files:
			panels_info = k.parse_images([file_path])
			for item in panels_info:
				k.save_panels(file_path, item["panels"])

	# Delete the temporary directory after processing
	shutil.rmtree(os.path.dirname(downloaded_files[0]))

infos = k.get_infos()

if info is None or len(infos) == 0:
	print("--input (-i) is not a file, or directory, or URL list: '" + str(args.input) + "'")
	sys.exit(1)

infos = json.dumps(infos)

# Generate HTML
if args.html or args.browser or args.html_static_dir or args.debug:
	images_dir = 'urls' if folder == 'urls' else os.path.relpath(folder, 'tests/results') + '/'
	reldir = args.html_static_dir[0] if args.html_static_dir else '../../'

	html = ''
	if args.debug:
		html = Debug.html(folder, reldir)
	else:
		html += HTML.header(reldir = reldir)
		html += HTML.reader(infos, images_dir)
		html += HTML.footer

	if args.output:
		html_file = args.output[0]

	if args.browser or args.output or args.debug:
		fh = open(html_file, 'w')
		fh.write(html)
		fh.close()
		print('Saved HTML file:', html_file)
	else:
		print(html)

# Or JSON infos
else:
	if args.output:
		f = open(args.output[0], 'w')
		f.write(infos)
		f.close()
	else:
		print(infos)

# Open in browser
if args.browser:
	subprocess.run([args.browser, html_file])
